{"/home/travis/build/npmtest/node-npmtest-asar/test.js":"/* istanbul instrument in package npmtest_asar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-asar/lib.npmtest_asar.js":"/* istanbul instrument in package npmtest_asar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_asar = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_asar = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-asar/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-asar && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_asar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_asar\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_asar.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_asar.rollup.js'] =\n            local.assetsDict['/assets.npmtest_asar.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_asar.__dirname + '/lib.npmtest_asar.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-asar/node_modules/asar/lib/asar.js":"'use strict'\nconst fs = require('fs')\nconst path = require('path')\nconst minimatch = require('minimatch')\nconst mkdirp = require('mkdirp')\n\nconst Filesystem = require('./filesystem')\nconst disk = require('./disk')\nconst crawlFilesystem = require('./crawlfs')\nconst createSnapshot = require('./snapshot')\n\n// Return whether or not a directory should be excluded from packing due to\n// \"--unpack-dir\" option\n//\n// @param {string} path - diretory path to check\n// @param {string} pattern - literal prefix [for backward compatibility] or glob pattern\n// @param {array} unpackDirs - Array of directory paths previously marked as unpacked\n//\nconst isUnpackDir = function (path, pattern, unpackDirs) {\n  if (path.indexOf(pattern) === 0 || minimatch(path, pattern)) {\n    if (unpackDirs.indexOf(path) === -1) {\n      unpackDirs.push(path)\n    }\n    return true\n  } else {\n    for (let i = 0; i < unpackDirs.length; i++) {\n      if (path.indexOf(unpackDirs[i]) === 0) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports.createPackage = function (src, dest, callback) {\n  return module.exports.createPackageWithOptions(src, dest, {}, callback)\n}\n\nmodule.exports.createPackageWithOptions = function (src, dest, options, callback) {\n  const dot = typeof options.dot === 'undefined' ? true : options.dot\n\n  return crawlFilesystem(src, { dot: dot }, function (error, filenames, metadata) {\n    if (error) { return callback(error) }\n    module.exports.createPackageFromFiles(src, dest, filenames, metadata, options, callback)\n  })\n}\n\n/*\ncreatePackageFromFiles - Create an asar-archive from a list of filenames\nsrc: Base path. All files are relative to this.\ndest: Archive filename (& path).\nfilenames: Array of filenames relative to src.\nmetadata: Object with filenames as keys and {type='directory|file|link', stat: fs.stat} as values. (Optional)\noptions: The options.\ncallback: The callback function. Accepts (err).\n*/\nmodule.exports.createPackageFromFiles = function (src, dest, filenames, metadata, options, callback) {\n  if (typeof metadata === 'undefined' || metadata === null) { metadata = {} }\n  const filesystem = new Filesystem(src)\n  const files = []\n  const unpackDirs = []\n\n  let filenamesSorted = []\n  if (options.ordering) {\n    const orderingFiles = fs.readFileSync(options.ordering).toString().split('\\n').map(function (line) {\n      if (line.includes(':')) { line = line.split(':').pop() }\n      line = line.trim()\n      if (line.startsWith('/')) { line = line.slice(1) }\n      return line\n    })\n\n    const ordering = []\n    for (const file of orderingFiles) {\n      const pathComponents = file.split(path.sep)\n      let str = src\n      for (const pathComponent of pathComponents) {\n        str = path.join(str, pathComponent)\n        ordering.push(str)\n      }\n    }\n\n    let missing = 0\n    const total = filenames.length\n\n    for (const file of ordering) {\n      if (!filenamesSorted.includes(file) && filenames.includes(file)) {\n        filenamesSorted.push(file)\n      }\n    }\n\n    for (const file of filenames) {\n      if (!filenamesSorted.includes(file)) {\n        filenamesSorted.push(file)\n        missing += 1\n      }\n    }\n\n    console.log(`Ordering file has ${((total - missing) / total) * 100}% coverage.`)\n  } else {\n    filenamesSorted = filenames\n  }\n\n  const handleFile = function (filename, done) {\n    let file = metadata[filename]\n    let type\n    if (!file) {\n      const stat = fs.lstatSync(filename)\n      if (stat.isDirectory()) { type = 'directory' }\n      if (stat.isFile()) { type = 'file' }\n      if (stat.isSymbolicLink()) { type = 'link' }\n      file = {stat, type}\n    }\n\n    let shouldUnpack\n    switch (file.type) {\n      case 'directory':\n        shouldUnpack = options.unpackDir\n          ? isUnpackDir(path.relative(src, filename), options.unpackDir, unpackDirs)\n          : false\n        filesystem.insertDirectory(filename, shouldUnpack)\n        break\n      case 'file':\n        shouldUnpack = false\n        if (options.unpack) {\n          shouldUnpack = minimatch(filename, options.unpack, {matchBase: true})\n        }\n        if (!shouldUnpack && options.unpackDir) {\n          const dirName = path.relative(src, path.dirname(filename))\n          shouldUnpack = isUnpackDir(dirName, options.unpackDir, unpackDirs)\n        }\n        files.push({filename: filename, unpack: shouldUnpack})\n        filesystem.insertFile(filename, shouldUnpack, file, options, done)\n        return\n      case 'link':\n        filesystem.insertLink(filename, file.stat)\n        break\n    }\n    return process.nextTick(done)\n  }\n\n  const insertsDone = function () {\n    return mkdirp(path.dirname(dest), function (error) {\n      if (error) { return callback(error) }\n      return disk.writeFilesystem(dest, filesystem, files, metadata, function (error) {\n        if (error) { return callback(error) }\n        if (options.snapshot) {\n          return createSnapshot(src, dest, filenames, metadata, options, callback)\n        } else {\n          return callback(null)\n        }\n      })\n    })\n  }\n\n  const names = filenamesSorted.slice()\n\n  const next = function (name) {\n    if (!name) { return insertsDone() }\n\n    return handleFile(name, function () {\n      return next(names.shift())\n    })\n  }\n\n  return next(names.shift())\n}\n\nmodule.exports.statFile = function (archive, filename, followLinks) {\n  const filesystem = disk.readFilesystemSync(archive)\n  return filesystem.getFile(filename, followLinks)\n}\n\nmodule.exports.listPackage = function (archive) {\n  return disk.readFilesystemSync(archive).listFiles()\n}\n\nmodule.exports.extractFile = function (archive, filename) {\n  const filesystem = disk.readFilesystemSync(archive)\n  return disk.readFileSync(filesystem, filename, filesystem.getFile(filename))\n}\n\nmodule.exports.extractAll = function (archive, dest) {\n  const filesystem = disk.readFilesystemSync(archive)\n  const filenames = filesystem.listFiles()\n\n  // under windows just extract links as regular files\n  const followLinks = process.platform === 'win32'\n\n  // create destination directory\n  mkdirp.sync(dest)\n\n  return filenames.map((filename) => {\n    filename = filename.substr(1)  // get rid of leading slash\n    const destFilename = path.join(dest, filename)\n    const file = filesystem.getFile(filename, followLinks)\n    if (file.files) {\n      // it's a directory, create it and continue with the next entry\n      mkdirp.sync(destFilename)\n    } else if (file.link) {\n      // it's a symlink, create a symlink\n      const linkSrcPath = path.dirname(path.join(dest, file.link))\n      const linkDestPath = path.dirname(destFilename)\n      const relativePath = path.relative(linkDestPath, linkSrcPath);\n      // try to delete output file, because we can't overwrite a link\n      (() => {\n        try {\n          fs.unlinkSync(destFilename)\n        } catch (error) {}\n      })()\n      const linkTo = path.join(relativePath, path.basename(file.link))\n      fs.symlinkSync(linkTo, destFilename)\n    } else {\n      // it's a file, extract it\n      const content = disk.readFileSync(filesystem, filename, file)\n      fs.writeFileSync(destFilename, content)\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-asar/node_modules/asar/lib/filesystem.js":"'use strict'\nconst fs = require('fs')\nconst path = require('path')\nconst tmp = require('tmp')\nconst UINT64 = require('cuint').UINT64\n\nclass Filesystem {\n  constructor (src) {\n    this.src = path.resolve(src)\n    this.header = {files: {}}\n    this.offset = UINT64(0)\n  }\n\n  searchNodeFromDirectory (p) {\n    let json = this.header\n    const dirs = p.split(path.sep)\n    for (const dir of dirs) {\n      if (dir !== '.') {\n        json = json.files[dir]\n      }\n    }\n    return json\n  }\n\n  searchNodeFromPath (p) {\n    p = path.relative(this.src, p)\n    if (!p) { return this.header }\n    const name = path.basename(p)\n    const node = this.searchNodeFromDirectory(path.dirname(p))\n    if (node.files == null) {\n      node.files = {}\n    }\n    if (node.files[name] == null) {\n      node.files[name] = {}\n    }\n    return node.files[name]\n  }\n\n  insertDirectory (p, shouldUnpack) {\n    const node = this.searchNodeFromPath(p)\n    if (shouldUnpack) {\n      node.unpacked = shouldUnpack\n    }\n    node.files = {}\n    return node.files\n  }\n\n  insertFile (p, shouldUnpack, file, options, callback) {\n    const dirNode = this.searchNodeFromPath(path.dirname(p))\n    const node = this.searchNodeFromPath(p)\n    if (shouldUnpack || dirNode.unpacked) {\n      node.size = file.stat.size\n      node.unpacked = true\n      process.nextTick(callback)\n      return\n    }\n\n    const handler = () => {\n      const size = file.transformed ? file.transformed.stat.size : file.stat.size\n\n      // JavaScript can not precisely present integers >= UINT32_MAX.\n      if (size > 4294967295) {\n        throw new Error(`${p}: file size can not be larger than 4.2GB`)\n      }\n\n      node.size = size\n      node.offset = this.offset.toString()\n      if (process.platform !== 'win32' && (file.stat.mode & 0o100)) {\n        node.executable = true\n      }\n      this.offset.add(UINT64(size))\n\n      return callback()\n    }\n\n    const tr = options.transform && options.transform(p)\n    if (tr) {\n      return tmp.file(function (err, path) {\n        if (err) { return handler() }\n        const out = fs.createWriteStream(path)\n        const stream = fs.createReadStream(p)\n\n        stream.pipe(tr).pipe(out)\n        return tr.on('end', function () {\n          file.transformed = {\n            path,\n            stat: fs.lstatSync(path)\n          }\n          return handler()\n        })\n      })\n    } else {\n      return process.nextTick(handler)\n    }\n  }\n\n  insertLink (p, stat) {\n    const link = path.relative(fs.realpathSync(this.src), fs.realpathSync(p))\n    if (link.substr(0, 2) === '..') {\n      throw new Error(`${p}: file links out of the package`)\n    }\n    const node = this.searchNodeFromPath(p)\n    node.link = link\n    return link\n  }\n\n  listFiles () {\n    const files = []\n    const fillFilesFromHeader = function (p, json) {\n      if (!json.files) {\n        return\n      }\n      return (() => {\n        const result = []\n        for (const f in json.files) {\n          const fullPath = path.join(p, f)\n          files.push(fullPath)\n          result.push(fillFilesFromHeader(fullPath, json.files[f]))\n        }\n        return result\n      })()\n    }\n\n    fillFilesFromHeader('/', this.header)\n    return files\n  }\n\n  getNode (p) {\n    const node = this.searchNodeFromDirectory(path.dirname(p))\n    const name = path.basename(p)\n    if (name) {\n      return node.files[name]\n    } else {\n      return node\n    }\n  }\n\n  getFile (p, followLinks) {\n    followLinks = typeof followLinks === 'undefined' ? true : followLinks\n    const info = this.getNode(p)\n\n    // if followLinks is false we don't resolve symlinks\n    if (info.link && followLinks) {\n      return this.getFile(info.link)\n    } else {\n      return info\n    }\n  }\n}\n\nmodule.exports = Filesystem\n","/home/travis/build/npmtest/node-npmtest-asar/node_modules/asar/lib/disk.js":"'use strict'\nconst fs = require('fs')\nconst path = require('path')\nconst mkdirp = require('mkdirp')\nconst pickle = require('chromium-pickle-js')\n\nconst Filesystem = require('./filesystem')\nconst filesystemCache = {}\n\nconst copyFileToSync = function (dest, src, filename) {\n  const srcFile = path.join(src, filename)\n  const targetFile = path.join(dest, filename)\n\n  const content = fs.readFileSync(srcFile)\n  const stats = fs.statSync(srcFile)\n  mkdirp.sync(path.dirname(targetFile))\n  return fs.writeFileSync(targetFile, content, {mode: stats.mode})\n}\n\nconst writeFileListToStream = function (dest, filesystem, out, list, metadata, callback) {\n  if (list.length === 0) {\n    out.end()\n    return callback(null)\n  }\n\n  const file = list[0]\n  if (file.unpack) {\n    // the file should not be packed into archive.\n    const filename = path.relative(filesystem.src, file.filename)\n    try {\n      copyFileToSync(`${dest}.unpacked`, filesystem.src, filename)\n    } catch (error) {\n      return callback(error)\n    }\n    return writeFileListToStream(dest, filesystem, out, list.slice(1), metadata, callback)\n  } else {\n    const tr = metadata[file.filename].transformed\n    const stream = fs.createReadStream((tr ? tr.path : file.filename))\n    stream.pipe(out, {end: false})\n    stream.on('error', callback)\n    return stream.on('end', function () {\n      return writeFileListToStream(dest, filesystem, out, list.slice(1), metadata, callback)\n    })\n  }\n}\n\nmodule.exports.writeFilesystem = function (dest, filesystem, files, metadata, callback) {\n  let sizeBuf\n  let headerBuf\n  try {\n    const headerPickle = pickle.createEmpty()\n    headerPickle.writeString(JSON.stringify(filesystem.header))\n    headerBuf = headerPickle.toBuffer()\n\n    const sizePickle = pickle.createEmpty()\n    sizePickle.writeUInt32(headerBuf.length)\n    sizeBuf = sizePickle.toBuffer()\n  } catch (error) {\n    return callback(error)\n  }\n\n  const out = fs.createWriteStream(dest)\n  out.on('error', callback)\n  out.write(sizeBuf)\n  return out.write(headerBuf, function () {\n    return writeFileListToStream(dest, filesystem, out, files, metadata, callback)\n  })\n}\n\nmodule.exports.readArchiveHeaderSync = function (archive) {\n  const fd = fs.openSync(archive, 'r')\n  let size\n  let headerBuf\n  try {\n    const sizeBuf = new Buffer(8)\n    if (fs.readSync(fd, sizeBuf, 0, 8, null) !== 8) {\n      throw new Error('Unable to read header size')\n    }\n\n    const sizePickle = pickle.createFromBuffer(sizeBuf)\n    size = sizePickle.createIterator().readUInt32()\n    headerBuf = new Buffer(size)\n    if (fs.readSync(fd, headerBuf, 0, size, null) !== size) {\n      throw new Error('Unable to read header')\n    }\n  } finally {\n    fs.closeSync(fd)\n  }\n\n  const headerPickle = pickle.createFromBuffer(headerBuf)\n  const header = headerPickle.createIterator().readString()\n  return {header: JSON.parse(header), headerSize: size}\n}\n\nmodule.exports.readFilesystemSync = function (archive) {\n  if (!filesystemCache[archive]) {\n    const header = this.readArchiveHeaderSync(archive)\n    const filesystem = new Filesystem(archive)\n    filesystem.header = header.header\n    filesystem.headerSize = header.headerSize\n    filesystemCache[archive] = filesystem\n  }\n  return filesystemCache[archive]\n}\n\nmodule.exports.readFileSync = function (filesystem, filename, info) {\n  let buffer = new Buffer(info.size)\n  if (info.size <= 0) { return buffer }\n  if (info.unpacked) {\n    // it's an unpacked file, copy it.\n    buffer = fs.readFileSync(path.join(`${filesystem.src}.unpacked`, filename))\n  } else {\n    // Node throws an exception when reading 0 bytes into a 0-size buffer,\n    // so we short-circuit the read in this case.\n    const fd = fs.openSync(filesystem.src, 'r')\n    try {\n      const offset = 8 + filesystem.headerSize + parseInt(info.offset)\n      fs.readSync(fd, buffer, 0, info.size, offset)\n    } finally {\n      fs.closeSync(fd)\n    }\n  }\n  return buffer\n}\n","/home/travis/build/npmtest/node-npmtest-asar/node_modules/asar/lib/crawlfs.js":"'use strict'\nconst fs = require('fs')\nconst glob = require('glob')\n\nmodule.exports = function (dir, options, callback) {\n  const metadata = {}\n  return glob(dir + '/**/*', options, function (error, filenames) {\n    if (error) { return callback(error) }\n    for (const filename of filenames) {\n      const stat = fs.lstatSync(filename)\n      if (stat.isFile()) {\n        metadata[filename] = {type: 'file', stat: stat}\n      } else if (stat.isDirectory()) {\n        metadata[filename] = {type: 'directory', stat: stat}\n      } else if (stat.isSymbolicLink()) {\n        metadata[filename] = {type: 'link', stat: stat}\n      }\n    }\n    return callback(null, filenames, metadata)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-asar/node_modules/asar/lib/snapshot.js":"'use strict'\nconst fs = require('fs')\nconst path = require('path')\nconst mksnapshot = require('mksnapshot')\nconst vm = require('vm')\n\nconst stripBOM = function (content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1)\n  }\n  return content\n}\n\nconst wrapModuleCode = function (script) {\n  script = script.replace(/^#!.*/, '')\n  return `(function(exports, require, module, __filename, __dirname) { ${script} \\n});`\n}\n\nconst dumpObjectToJS = function (content) {\n  let result = 'var __ATOM_SHELL_SNAPSHOT = {\\n'\n  for (const filename in content) {\n    const func = content[filename].toString()\n    result += `  '${filename}': ${func},\\n`\n  }\n  result += '};\\n'\n  return result\n}\n\nconst createSnapshot = function (src, dest, filenames, metadata, options, callback) {\n  const content = {}\n  try {\n    src = path.resolve(src)\n    for (const filename of filenames) {\n      const file = metadata[filename]\n      if ((file.type === 'file' || file.type === 'link') && filename.substr(-3) === '.js') {\n        const script = wrapModuleCode(stripBOM(fs.readFileSync(filename, 'utf8')))\n        const relativeFilename = path.relative(src, filename)\n        try {\n          const compiled = vm.runInThisContext(script, {filename: relativeFilename})\n          content[relativeFilename] = compiled\n        } catch (error) {\n          console.error('Ignoring ' + relativeFilename + ' for ' + error.name)\n        }\n      }\n    }\n  } catch (error) {\n    return callback(error)\n  }\n\n  // run mksnapshot\n  const str = dumpObjectToJS(content)\n  const version = options.version\n  const arch = options.arch\n  const builddir = options.builddir\n  let snapshotdir = options.snapshotdir\n\n  if (typeof snapshotdir === 'undefined' || snapshotdir === null) { snapshotdir = path.dirname(dest) }\n  const target = path.resolve(snapshotdir, 'snapshot_blob.bin')\n  return mksnapshot(str, target, version, arch, builddir, callback)\n}\n\nmodule.exports = createSnapshot\n"}